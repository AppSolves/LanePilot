# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

ARG L4T_VERSION=r10.3.0
ARG PLATFORM=linux/arm64

### Builder image ###
FROM --platform=${PLATFORM} nvcr.io/nvidia/l4t-tensorrt:${L4T_VERSION}-devel AS opencv-builder

# Compute capability is set for NVIDIA Jetson Orin Nano by default
ARG CUDA_COMPUTE_CAPABILITY=8.7
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies and required packages
RUN apt-get update -y --fix-missing && apt-get upgrade -y --fix-missing
RUN apt-get install -y build-essential ninja-build git wget unzip pkg-config zlib1g-dev \
    python3-dev python3-numpy python-dev-is-python3 \
    gstreamer1.0-tools libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev \
    libtbb2 libgtk-3-dev libxine2-dev cmake \
    libjpeg-dev libjpeg8-dev libjpeg-turbo8-dev \
    libpng-dev libtiff-dev libglew-dev \
    libavcodec-dev libavformat-dev libswscale-dev \
    libgtk2.0-dev libgtk-3-dev libcanberra-gtk* \
    python3-pip libjpeg-dev libpng-dev libtiff-dev \
    libavcodec-dev libavformat-dev libswscale-dev \
    libxvidcore-dev libx264-dev \
    libtbb-dev libxine2-dev \
    libv4l-dev v4l-utils qv4l2 \
    libtesseract-dev libpostproc-dev \
    libvorbis-dev libaom-dev libdav1d-dev \
    libyuv-dev libjpeg-dev libpng-dev \
    libfaac-dev libmp3lame-dev libtheora-dev \
    libopencore-amrnb-dev libopencore-amrwb-dev \
    libopenblas-dev libatlas-base-dev libblas-dev \
    liblapack-dev liblapacke-dev libeigen3-dev gfortran \
    libhdf5-dev libprotobuf-dev protobuf-compiler \
    libgoogle-glog-dev libgflags-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install NVIDIA Video Codec SDK
RUN mkdir $HOME/nv-codec-headers_build && cd $HOME/nv-codec-headers_build \
    && git clone https://github.com/FFmpeg/nv-codec-headers.git \
    && cd nv-codec-headers \
    && make && make install \
    && cd $HOME \
    && rm -rf $HOME/nv-codec-headers_build

RUN for f in /usr/local/include/ffnvcodec/*; do \
    base=$(basename "$f"); \
    if [[ "$base" == dynlink_* ]]; then \
    ln -sf "$f" "/usr/local/cuda/include/${base#dynlink_}"; \
    else \
    ln -sf "$f" "/usr/local/cuda/include/$base"; \
    fi; \
    done

# Install libavif
RUN git clone https://github.com/AOMediaCodec/libavif.git \
    && cd libavif && mkdir build && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release -G Ninja \
    && ninja && ninja install \
    && cd $HOME \
    && rm -rf $HOME/libavif

# Install cuDNN
RUN wget https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/linux-aarch64/cudnn-linux-aarch64-9.10.0.56_cuda12-archive.tar.xz \
    && tar -xvf cudnn-linux-aarch64-9.10.0.56_cuda12-archive.tar.xz \
    && cd cudnn-linux-aarch64-9.10.0.56_cuda12-archive \
    && cp include/cudnn*.h /usr/local/cuda/include \
    && cp lib/libcudnn* /usr/local/cuda/lib64 \
    && cd $HOME \
    && rm -rf $HOME/cudnn-linux-aarch64-9.10.0.56_cuda12-archive \
    && rm -rf $HOME/cudnn-linux-aarch64-9.10.0.56_cuda12-archive.tar.xz

WORKDIR /opt

RUN git clone --depth=1 https://github.com/opencv/opencv.git
RUN git clone --depth=1 https://github.com/opencv/opencv_contrib.git

WORKDIR /opt/opencv/build

RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -DCMAKE_INSTALL_PREFIX=/opt/opencv-install \
    -DOPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
    -D WITH_OPENCL=OFF \
    -D WITH_CUDA=ON \
    -D CUDA_ARCH_BIN=${CUDA_COMPUTE_CAPABILITY} \
    -D CUDA_ARCH_PTX=${CUDA_COMPUTE_CAPABILITY} \
    -D WITH_CUDNN=ON \
    -D WITH_CUBLAS=ON \
    -D ENABLE_FAST_MATH=ON \
    -D CUDA_FAST_MATH=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D WITH_QT=OFF \
    -D WITH_OPENMP=ON \
    -D BUILD_TIFF=ON \
    -D WITH_AVIF=ON \
    -D WITH_OPENJPEG=ON \
    -D WITH_JPEG=ON \
    -D WITH_PNG=ON \
    -D WITH_FFMPEG=ON \
    -D WITH_GSTREAMER=ON \
    -D WITH_TBB=ON \
    -D BUILD_TBB=ON \
    -D BUILD_TESTS=OFF \
    -D WITH_EIGEN=ON \
    -D WITH_V4L=ON \
    -D WITH_LIBV4L=ON \
    -D WITH_PROTOBUF=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D INSTALL_C_EXAMPLES=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D BUILD_EXAMPLES=OFF \
    -D CMAKE_CXX_FLAGS="-march=native -mtune=native" \
    -D CMAKE_C_FLAGS="-march=native -mtune=native" ..

RUN make -j$(nproc) && make install
RUN ldconfig

### Final image ###
FROM --platform=${PLATFORM} nvcr.io/nvidia/l4t-tensorrt:${L4T_VERSION}-runtime AS base

LABEL org.opencontainers.image.source=https://github.com/AppSolves/LanePilot
LABEL org.opencontainers.image.description="An image that contains CUDA, CUDNN, TensorRT, PyTorch, OpenCV and GStreamer runtime dependencies."
LABEL org.opencontainers.image.licenses=https://raw.githubusercontent.com/AppSolves/LanePilot/refs/heads/main/LICENSE.md

ARG TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl
ENV PATH=/usr/local/bin:${PATH:-}
ENV LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH:-}
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH:-}
ENV PYTHONPATH=/usr/local/python:${PYTHONPATH:-}

# Copy NVIDIA Video Codec SDK
COPY --from=opencv-builder /usr/local/include/ffnvcodec/* /usr/local/include/ffnvcodec/
RUN for f in /usr/local/include/ffnvcodec/*; do \
    base=$(basename "$f"); \
    ln -sf "$f" "/usr/local/cuda/include/${base#dynlink_}"; \
    done

# Copy libavif
COPY --from=opencv-builder /usr/local/lib/libavif* /usr/local/lib/

# Copy OpenCV
COPY --from=opencv-builder /opt/opencv-install /usr/local

# Verify OpenCV installation
RUN python3 -c "import cv2; print(cv2.__version__)"

# Update dependencies
RUN ldconfig && \
    apt-get update -y --fix-missing && \
    apt-get upgrade -y --fix-missing && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Update pip and install PyTorch
RUN pip install --no-cache-dir -U pip && \
    pip install --no-cache-dir -U ${TORCH_INSTALL}

# Remove headers, static libs, pkgconfig, docs and other dev stuff to save space
RUN rm -rf /usr/local/include \
    /usr/local/lib/*.a \
    /usr/local/lib/*.la \
    /usr/local/lib/*.cmake \
    /usr/local/lib/pkgconfig \
    /usr/local/lib/cmake \
    /usr/local/share \
    /usr/local/doc

# Strip binaries to reduce size
RUN find /usr/local -type f -executable ! -name '*.so*' -exec strip --strip-unneeded {} + 2>/dev/null || true

# Remove pip cache and __pycache__
RUN rm -rf /root/.cache /root/.pip /usr/local/lib/python*/dist-packages/*/__pycache__

# Set the default command to run when starting the container
CMD ["python3", "-c", "import cv2; print(cv2.getBuildInformation())"]